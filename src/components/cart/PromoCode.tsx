// import { type FC, useState } from 'react';

// import IconArrowRight from '../../assets/images/icons/icon-arrow-right.svg?react';
// import type { PromoCode as PromoCodeType } from '../../data/mockPromoCodes';
// import { mockPromoCodes } from '../../data/mockPromoCodes';
// import { useTypedDispatch, useTypedSelector } from '../../hooks/useRedux';
// import { selectCartTotal, selectPromoCode } from '../../redux/cart/selectors';
// import { applyPromoCode } from '../../redux/cart/slice';
// import { UiButton } from '../ui/UiButton';

// const PromoCode: FC = () => {
//   const [inputValue, setInputValue] = useState('');
//   const [errorMessage, setErrorMessage] = useState<string | null>(null);
//   const dispatch = useTypedDispatch();
//   const selectedCode = useTypedSelector(selectPromoCode);
//   const total = useTypedSelector(selectCartTotal);

//   // üîß FIX 1: –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –∑–Ω–∏–∂–∫–∏
//   const calculateDiscount = (promo: PromoCodeType, sum: number): number => {
//     if (promo.discountType === 'percent') {
//       return Math.round(sum * (promo.value / 100));
//     }
//     if (promo.discountType === 'fixed') {
//       return Math.min(promo.value, sum);
//     }
//     return 0;
//   };

//   const handleApply = (): void => {
//     const trimmedCode = inputValue.trim().toUpperCase();

//     if (!trimmedCode) {
//       setErrorMessage('–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥');
//       return;
//     }

//     const promo = mockPromoCodes.find(
//       (p: PromoCodeType) => p.code.toUpperCase() === trimmedCode,
//     );

//     if (!promo) {
//       setErrorMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
//       return;
//     }

//     if (!promo.isActive) {
//       setErrorMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π');
//       return;
//     }

//     // üîß FIX 2: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏ –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω ‚Äî –ø–æ 'YYYY-MM-DD'
//     if (promo.expiresAt) {
//       const todayStr = new Date().toISOString().slice(0, 10);
//       if (promo.expiresAt < todayStr) {
//         setErrorMessage('–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É –∑–∞–≤–µ—Ä—à–∏–≤—Å—è');
//         return;
//       }
//     }

//     if (promo.minOrderTotal && total < promo.minOrderTotal) {
//       setErrorMessage('–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ–π —Å—É–º—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
//       return;
//     }

//     if (promo.isUsed) {
//       setErrorMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ');
//       return;
//     }

//     // –Ø–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ ‚Äî –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
//     setErrorMessage(null);
//     dispatch(applyPromoCode(trimmedCode));
//   };

//   // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ–≥–æ –∫–æ–¥—É + –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –∑–Ω–∏–∂–∫–∏
//   const appliedPromo = selectedCode
//     ? mockPromoCodes.find(
//         (p) => p.code.toUpperCase() === selectedCode.toUpperCase(),
//       )
//     : null;
//   const discount = appliedPromo ? calculateDiscount(appliedPromo, total) : 0;

//   return (
//     <div className="w-[395px]">
//       <div className="w-full">
//         <h3 className="mb-[12px] h-[60px] font-family-primary text-h4 uppercase text-light-black">
//           –£ –≤–∞—Å —î –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–Ω–∏–∂–∫–∏?
//         </h3>

//         <div className="flex h-[54px] w-full items-center justify-between border border-light-grey">
//           <div className="w-[251px] text-[18px] leading-[1.4]">
//             <input
//               type="text"
//               placeholder="–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–Ω–∏–∂–∫–∏"
//               className="h-[54px] w-full cursor-text bg-transparent px-[10px] outline-none placeholder:text-grey"
//               value={inputValue}
//               onChange={(e) => {
//                 setInputValue(e.target.value);
//                 if (errorMessage) setErrorMessage(null);
//               }}
//               onKeyDown={(e) => {
//                 if (e.key === 'Enter') {
//                   e.preventDefault();
//                   handleApply();
//                 }
//               }}
//             />
//           </div>

//           <UiButton
//             onClick={handleApply}
//             className="hover:bg-dark-black h-[54px] w-[57px] min-w-0 bg-light-black p-0 text-white"
//             aria-label="–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"
//           >
//             <IconArrowRight className="h-[16px] w-[39px]" />
//           </UiButton>
//         </div>
//       </div>

//       {selectedCode && !errorMessage && (
//         <p className="mt-1">
//           ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: <strong>{selectedCode}</strong>
//           <br />
//           –ó–Ω–∏–∂–∫–∞: {discount} –≥—Ä–Ω
//         </p>
//       )}

//       {errorMessage && <p className="mt-2 text-red">‚ùå {errorMessage}</p>}
//     </div>
//   );
// };

// export { PromoCode };
import { type FC, useState } from 'react';

import IconArrowRight from '../../assets/images/icons/icon-arrow-right.svg?react';
import type { PromoCode as PromoCodeType } from '../../data/mockPromoCodes';
import { mockPromoCodes } from '../../data/mockPromoCodes';
import { useTypedDispatch, useTypedSelector } from '../../hooks/useRedux';
import { selectCartTotal, selectPromoCode } from '../../redux/cart/selectors';
import { applyPromoCode } from '../../redux/cart/slice';
import { UiButton } from '../ui/UiButton';

const PromoCode: FC = () => {
  const [inputValue, setInputValue] = useState('');
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const dispatch = useTypedDispatch();
  const selectedCode = useTypedSelector(selectPromoCode);
  const total = useTypedSelector(selectCartTotal);

  // ‚úÖ –î–û–î–ê–ù–û: –ª–æ–∫–∞–ª—å–Ω–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å "—â–æ–π–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ".
  // –í—ñ–Ω –∂–∏–≤–µ —Ç—ñ–ª—å–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ–π –ø–∞–º'—è—Ç—ñ (–Ω–µ –ø–µ—Ä—Å–∏—Å—Ç–∏—Ç—å—Å—è),
  // —Ç–æ–º—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–∞—î false —ñ –±–∞–Ω–µ—Ä –Ω–µ –∑'—è–≤–ª—è—î—Ç—å—Å—è.
  const [wasJustApplied, setWasJustApplied] = useState(false);

  // (–Ω–µ —á—ñ–ø–∞—é —Ç–≤–æ—é –ª–æ–≥—ñ–∫—É) –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ—ó –∑–Ω–∏–∂–∫–∏
  const calculateDiscount = (promo: PromoCodeType, sum: number): number => {
    if (promo.discountType === 'percent') {
      return Math.round(sum * (promo.value / 100));
    }
    if (promo.discountType === 'fixed') {
      return Math.min(promo.value, sum);
    }
    return 0;
  };

  const handleApply = (): void => {
    const trimmedCode = inputValue.trim().toUpperCase();

    if (!trimmedCode) {
      setErrorMessage('–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥');
      return;
    }

    const promo = mockPromoCodes.find(
      (p: PromoCodeType) => p.code.toUpperCase() === trimmedCode,
    );

    if (!promo) {
      setErrorMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    if (!promo.isActive) {
      setErrorMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π');
      return;
    }

    // (–Ω–µ —á—ñ–ø–∞—é —Ç–≤–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É) –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ 'YYYY-MM-DD'
    if (promo.expiresAt) {
      const todayStr = new Date().toISOString().slice(0, 10);
      if (promo.expiresAt < todayStr) {
        setErrorMessage('–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É –∑–∞–≤–µ—Ä—à–∏–≤—Å—è');
        return;
      }
    }

    if (promo.minOrderTotal && total < promo.minOrderTotal) {
      setErrorMessage('–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ–π —Å—É–º—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      return;
    }

    if (promo.isUsed) {
      setErrorMessage('–ü—Ä–æ–º–æ–∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ');
      return;
    }

    // ‚úÖ —è–∫—â–æ –≤—Å–µ –æ–∫ ‚Äî –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ç–∞ –≤—ñ–¥–º—ñ—á–∞—î–º–æ, —â–æ —Ü–µ –±—É–ª–æ "—â–æ–π–Ω–æ"
    setErrorMessage(null);
    dispatch(applyPromoCode(trimmedCode));
    setWasJustApplied(true); // ‚Üê –≥–æ–ª–æ–≤–Ω–µ: –±–∞–Ω–µ—Ä –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ —Ü—ñ–π —Å–µ—Å—ñ—ó
  };

  // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ–≥–æ –∫–æ–¥—É + –ª–æ–∫–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –∑–Ω–∏–∂–∫–∏
  const appliedPromo = selectedCode
    ? mockPromoCodes.find(
        (p) => p.code.toUpperCase() === selectedCode.toUpperCase(),
      )
    : null;
  const discount = appliedPromo ? calculateDiscount(appliedPromo, total) : 0;

  return (
    <div className="w-[395px]">
      <div className="w-full">
        <h3 className="mb-[12px] h-[60px] font-family-primary text-h4 uppercase text-light-black">
          –£ –≤–∞—Å —î –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–Ω–∏–∂–∫–∏?
        </h3>

        <div className="flex h-[54px] w-full items-center justify-between border border-light-grey">
          <div className="w-[251px] text-[18px] leading-[1.4]">
            <input
              type="text"
              placeholder="–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–Ω–∏–∂–∫–∏"
              className="h-[54px] w-full cursor-text bg-transparent px-[10px] outline-none placeholder:text-grey"
              value={inputValue}
              onChange={(e) => {
                setInputValue(e.target.value);
                if (errorMessage) setErrorMessage(null);
              }}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  e.preventDefault();
                  handleApply();
                }
              }}
            />
          </div>

          <UiButton
            onClick={handleApply}
            className="hover:bg-dark-black h-[54px] w-[57px] min-w-0 bg-light-black p-0 text-white"
            aria-label="–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"
          >
            <IconArrowRight className="h-[16px] w-[39px]" />
          </UiButton>
        </div>
      </div>

      {/* ‚¨áÔ∏è –ë–£–õ–û: {selectedCode && !errorMessage && ( ... )} */}
      {/* ‚úÖ –°–¢–ê–õ–û: –ø–æ–∫–∞–∑—É—î–º–æ "–∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ" –ª–∏—à–µ —è–∫—â–æ —â–æ–π–Ω–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏ —É —Ü—ñ–π —Å–µ—Å—ñ—ó */}
      {selectedCode && wasJustApplied && !errorMessage && (
        <p className="mt-1">
          ‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: <strong>{selectedCode}</strong>
          <br />
          –ó–Ω–∏–∂–∫–∞: {discount} –≥—Ä–Ω
        </p>
      )}

      {errorMessage && <p className="mt-2 text-red">‚ùå {errorMessage}</p>}
    </div>
  );
};

export { PromoCode };
